import pandas as pd

from selenium.webdriver import Firefox
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException

# Parse XML file and extract relevant interface information
def parse_xml(path_to_xml):
    '''
    Specifically designed to parse a PISA generated xml file
    :return: a df containing select interface features
    '''

    xml_df = pd.read_xml(path_to_xml)

    with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also
        print(xml_df)

    # Save name of the two proteins participating in the interaction
    proteins = (xml_df.loc[0]['STRUCTURENAME']).split('.')[0]

    for col in range(4, xml_df.shape[0]):

        # Save the number of hydrogen bonds
        feature_hbonds = (xml_df.loc[col]['INTERFACENHBONDS'])

        # Save the number of salt bridges
        feature_saltbridges = (xml_df.loc[col]['INTERFACENSALTBRIDGES'])

        # Save the number of salt bridges
        feature_disulfides = (xml_df.loc[col]['INTERFACENDISULFIDEBONDS'])

        # Save the delta g of the interaction
        # The XML file generated by PISA is bad so interface area corresponds with delta G (Aug26,2022)
        feature_deltag = (xml_df.loc[col]['INTERFACEAREA'])

        # Save the p value associated with the delta g of the interaction
        feature_deltagpvalue = (xml_df.loc[col]['INTERFACEDELTAGPVALUE'])

        feature_avgresidues = (((xml_df.loc[col]['INTERFACENRESIDUES1']) + (xml_df.loc[col]['INTERFACENRESIDUES1'])) / 2)


        temp_df = pd.DataFrame({
            'protA_protB': [proteins],
            'hbonds': [feature_hbonds],
            'saltbridges': [feature_saltbridges],
            'disulfides': [feature_disulfides],
            'deltag': [feature_deltag],
            'pvalue': [feature_deltagpvalue],
            'avg_residues': [feature_avgresidues],
        })

#xml_path = 'datasets\\xml_files\\ranked_0.xml'
#parse_xml(xml_path)


# Start of web crawler
def run_pisa(pdb_file, xml_files_path):

    # Checks if an element exists on the current page
    def check_exists_by_name(name, cur_driver):
        try:
            cur_driver.find_element(by=By.NAME, value=name)
        except NoSuchElementException:
            return False
        return True

    # Load Firefox without GUI
    opts = Options()
    #opts.add_argument("--headless")
    driver = Firefox(options=opts)

    # Go to the website
    driver.get("https://www.ebi.ac.uk/msd-srv/prot_int/pistart.html")
    driver.implicitly_wait(1)

    driver.find_element(by=By.NAME, value='start_server').click()
    driver.implicitly_wait(2)

    # Find the radio button for uploading a coordinate file
    driver.find_element(by=By.XPATH, value='/html/body/div[2]/div[2]/div/form/table/tbody/tr[4]/td/u/input').click()
    driver.implicitly_wait(3)

    # Upload the PDB file that we want to run PISA on
    driver.find_element(by=By.NAME, value='file_upload').send_keys(pdb_file)
    driver.implicitly_wait(2)
    driver.find_element(by=By.NAME, value='btn_upload').click()

    # Wait for upload to finish and submit button to appear
    while not check_exists_by_name('btn_submit_interfaces', driver):
        pass

    # Submit pdb to PISA
    driver.find_element(by=By.NAME, value='btn_submit_interfaces').click()

    # Figure out if contacts are found
    if driver.find_element(by=By.CLASS_NAME, value='phead').text.startswith('No'):
        print("No interface found")

    # Contacts are found, extract data from XML
    else:
        while not check_exists_by_name('downloadXML', driver):
            pass
        # Get XML data
        driver.find_element(by=By.NAME, value='downloadXML').click()
        driver.implicitly_wait(1)
        # Go to window with XML data
        driver.switch_to.window(driver.window_handles[1])
        xml_url = driver.current_url

        # Saves name of input file for identification
        file_name = pdb_file.split('\\')[-1].split('.')[0]
        print(driver.page_source)
        with open(xml_files_path + '/' + file_name + '.xml', 'w') as file:
            file.write(driver.page_source)